import requests
from bs4 import BeautifulSoup


def get_url(stylename, type):
    if type == 'top100':
        url = str(str(styles[stylename])+str('top-100/'))
    if type == 'fresh':
        url = str(str(styles[stylename])+str('tracks/'))
        if stylename == 'All styles':
            url = str(str(url) + 'all/')
    return url


# получение готовой таблицы track название/исполнитель/дата релиза по ссылке url
def get_tracks_list(url):
    # получение таблицы элементов для обработки
    def get_variable_table(soup_getted):
        table = soup_getted.find('ul', class_='bucket-items ec-bucket')
        rowNames = table.findAll('span', class_='buk-track-primary-title')
        rowNamesMix = table.findAll('span', class_='buk-track-remixed')
        rowArtists = table.findAll('p', class_='buk-track-artists')
        rowDates = table.findAll('p', class_='buk-track-released')
        return rowNames, rowNamesMix, rowArtists, rowDates

    # получение составленной таблицы из сырых данных
    def do_row(rowNames, rowNamesMix, rowArtists, rowDates):
        i = 0
        for rowName in rowNames:
            track[i][0] = rowName.find(text=True)
            i += 1

        i = 0
        for rowNameMix in rowNamesMix:
            track[i][0] += ' ' + rowNameMix.find(text=True)
            i += 1

        i = 0
        for rowArtist in rowArtists:
            track[i][1] = ' '.join(
                [block.string for block in rowArtist.findAll('a')])
            i += 1

        i = 0
        for rowDate in rowDates:
            track[i][2] = rowDate.find(text=True)
            i += 1
        return track

    # сортировка сырой таблицы по released data
    def sortirovka(a):
        return a[2]

    # удаление из таблицы пустых элементов
    def sokratit(track):
        i = 0
        while True:
            line = track[i]
            if len(line[0]) == 0:
                track.pop(i)
                i -= 1
            i += 1
            if i >= len(track):
                break
        return track

    # парсинг url
    r = requests.get(url)

    # soup полученного результата
    soup = BeautifulSoup(r.text, features="html.parser")

    # получение данных для таблицы
    rowNames, rowNamesMix, rowArtists, rowDates = get_variable_table(soup)

    # объявление формата track
    track = [['', '', ''] for i in range(150)]

    # составление сырой таблицы track
    track = do_row(rowNames, rowNamesMix, rowArtists, rowDates)

    # сортировка
    track.sort(reverse=True, key=sortirovka)

    # сокращение
    sokratit(track)

    # готовая таблица track
    return track


def output_tracks(track, maxcount):
    outputfile = open('todo.dll', 'w', encoding='utf-8')
    i = 0
    for line in track:
        line0 = str(line[0] + '%20')
        line1 = str(line[1])
        s = str(line0 + line1).replace(' ', '%20')
        # line2 = str(line[2] + '\n') добавление даты
        outputfile.write(s + '\n')
        i += 1
        if i == maxcount:
            break
    outputfile.close()
    return


styles = {
        'All styles': 'https://www.beatport.com/',
        'AFRO HOUSE': 'https://www.beatport.com/genre/afro-house/89/',
        'BIG ROOM': 'https://www.beatport.com/genre/big-room/79/',
        'BREAKS': 'https://www.beatport.com/genre/breaks/9/',
        'DJ TOOLS': 'https://www.beatport.com/genre/dj-tools/16/',
        'DANCE': 'https://www.beatport.com/genre/dance/39/',
        'DEEP HOUSE': 'https://www.beatport.com/genre/deep-house/12/',
        'DRUM & BASS': 'https://www.beatport.com/genre/drum-and-bass/1/',
        'DUBSTEP': 'https://www.beatport.com/genre/dubstep/18/',
        'ELECTRO HOUSE': 'https://www.beatport.com/genre/electro-house/17/',
        'ELECTRONICA / DOWNTEMPO': 'https://www.beatport.com/genre/electronica-downtempo/3/',
        'FUNK / SOUL / DISCO': 'https://www.beatport.com/genre/funk-soul-disco/40/',
        'FUNKY / GROOVE / JACKIN\' HOUSE': 'https://www.beatport.com/genre/funky-groove-jackin-house/81/',
        'FUTURE HOUSE': 'https://www.beatport.com/genre/future-house/65/',
        'GARAGE / BASSLINE / GRIME': 'https://www.beatport.com/genre/garage-bassline-grime/86/',
        'GLITCH HOP': 'https://www.beatport.com/genre/glitch-hop/49/',
        'HARD DANCE': 'https://www.beatport.com/genre/hard-dance/8/',
        'HARDCORE / HARD TECHNO': 'https://www.beatport.com/genre/hardcore-hard-techno/2/',
        'HIP-HOP / R&B': 'https://www.beatport.com/genre/hip-hop-r-and-b/38/',
        'HOUSE': 'https://www.beatport.com/genre/house/5/',
        'INDIE DANCE / NU DISCO': 'https://www.beatport.com/genre/indie-dance-nu-disco/37/',
        'LEFTFIELD BASS': 'https://www.beatport.com/genre/leftfield-bass/85/',
        'LEFTFIELD HOUSE & TECHNO': 'https://www.beatport.com/genre/leftfield-house-and-techno/80/',
        'MELODIC HOUSE & TECHNO': 'https://www.beatport.com/genre/melodic-house-and-techno/90/',
        'MINIMAL / DEEP TECH': 'https://www.beatport.com/genre/minimal-deep-tech/14/',
        'PROGRESSIVE HOUSE': 'https://www.beatport.com/genre/progressive-house/15/',
        'PSY-TRANCE': 'https://www.beatport.com/genre/psy-trance/13/',
        'REGGAE / DANCEHALL / DUB': 'https://www.beatport.com/genre/reggae-dancehall-dub/41/',
        'TECH HOUSE': 'https://www.beatport.com/genre/tech-house/11/',
        'TECHNO': 'https://www.beatport.com/genre/techno/6/',
        'TRANCE': 'https://www.beatport.com/genre/trance/7/',
        'TRAP / FUTURE BASS': 'https://www.beatport.com/genre/trap-future-bass/87/'
        }


# url страницы, с которой составлять таблицу track
# url = 'https://www.beatport.com/genre/funk-soul-disco/40/top-100'

# создание таблицы track

# file = open('todo.dll', 'r', encoding='utf-8')
# stylename = str(file.readline())[:-1]
# count = int(str(file.readline())[:-1])
# type = str(file.readline())
# file.close()

output_tracks(get_tracks_list(get_url(stylename, type)), count)
